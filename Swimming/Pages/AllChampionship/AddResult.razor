@attribute [Authorize]
@page "/AllChampionship/AddResult/{ChampionShId}"
@using Swimming.Data
@using Swimming.CustomModel
@inject IJSRuntime JSRuntime
@inject Swimming.IService.IChampionshipService ChampionshipService
@inject Swimming.IService.IParticipantSevice ParticipantSevice
@inject Swimming.IService.IRacingService RacingService
@inject NavigationManager NavigationManager
@inject NotificationService notificationService
<h1>اضافة نتائج </h1>
<hr />
<RadzenCard>
    <AuthorizeView Context="authContext">
        <Authorized>
            <EditForm Model="@NewChampionship" Context="formContext">
                <DataAnnotationsValidator />
                <div class="col-md-4">
                    <div class="form-group">
                        <label for="Name" class="control-label">الاسم</label>
                        <InputText for="Name" class="form-control" @bind-Value="@NewChampionship.ChampionshipName"></InputText>

                    </div>
                    <div class="form-group">
                        <label asp-for="Date" class="control-label">تاريخ السباق</label>
                        <RadzenDatePicker @bind-Value="@NewChampionship.Date" DateFormat="d" class="control-label" />
                    </div>

                    <div class="form-group">
                        <label asp-for="RacingName" class="control-label">السباق</label>
                        <RadzenDropDown AllowClear="true" TValue="int"
                                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        FilterOperator="StringFilterOperator.StartsWith"
                                        AllowFiltering="true"
                                        Data="@allRacingofchamp"
                                        TextProperty="RacingName"
                                        ValueProperty="Id"
                                        Style="margin-bottom: 20px"
                                        Change="@(args => Change(args))"
                                        class="form-control" />
                    </div>
                    <RadzenGrid @ref="ParticipantsGrid" AllowFiltering="true"
                                AllowPaging="true" PageSize="1000"
                                AllowSorting="true" EditMode="DataGridEditMode.Single"
                                Data="@newParticipants" TItem="PartiWLastResult" Style="width:700px !important" RowSelect="@(args => Party = args)">
                        <Columns>
                            <RadzenGridColumn TItem="PartiWLastResult" Property="Name" Title="الاسم" />
                            <RadzenGridColumn TItem="PartiWLastResult" Property="GenderName" Title="الجنس" />
                            <RadzenGridColumn TItem="PartiWLastResult" Property="Birthday" Title="تاريخ الميلاد">
                                <Template Context="PartiWLastResult">
                                    @String.Format("{0:d}", PartiWLastResult.Birthday.Value.Year)
                                </Template>
                            </RadzenGridColumn>
                            <RadzenGridColumn TItem="PartiWLastResult" Property="CaptainOrOrganization" Title="الكابتن/الهيئه" />
                            <RadzenGridColumn TItem="PartiWLastResult" Property="Result" Title="اخر نتيجة" />
                            <RadzenGridColumn Width="150px" TItem="PartiWLastResult" Property="al:web:url" Title="اضافة نتيجة" Filterable="false">
                                <Template Context="PartiWLastResult">
                                    <RadzenDatePicker TValue="DateTime?" ShowTime="true" TimeOnly="true"
                                                      ShowSeconds="true" HoursStep="1" MinutesStep="1" DateFormat="HH:mm:ss" ShowTimeOkButton="false"
                                                      SecondsStep="1" Change=@(args => OnChange(args, "DatePicker with steps for time", "HH:mm:ss")) />
                                </Template>
                            </RadzenGridColumn>
                        </Columns>

                    </RadzenGrid>
                    <div class="form-group">
                        <button type="submit" class="btn btn-default" @onclick="() => TheEnd()">نهاية البطولة</button>
                        <button class="btn" type="button" @onclick="() => cancel()">إلغاء</button>
                    </div>
                </div>
            </EditForm>
        </Authorized>
    </AuthorizeView>
</RadzenCard>


@code {
    [Parameter]
    public string ChampionShId { get; set; }
    RadzenGrid<PartiWLastResult> ParticipantsGrid;
    ChampionShipwithRacing newChampionShipwithRacing = new ChampionShipwithRacing();
    List<PartiWLastResult> newParticipants = new List<PartiWLastResult>();
    List<Racing> allRacingofchamp = new List<Racing>();
    Participants selectedParticipants = new Participants();
    List<Racing> Racings;
    PartiWLastResult Party;
    IEnumerable<Racing> customers;
    public DateTime? time { get; set; }
    Championship NewChampionship = new Championship();
    IEnumerable<int> selectedRacing;
    object str = null;
    object data = null;
    IEnumerable<DateTime> dates = new DateTime[] { DateTime.Today.AddDays(-1), DateTime.Today.AddDays(1) };
    protected override async Task OnInitializedAsync()
    {
        allRacingofchamp = await Task.Run(() => ChampionshipService.GetRacingOfCS(Convert.ToInt32(ChampionShId)));
        NewChampionship = await Task.Run(() => ChampionshipService.GetChampionshipbyId(Convert.ToInt32(ChampionShId)));

    }
    //protected void CreateChampionship()
    //{
    //    ChampionshipService.AddChampionship(NewChampionship, newParticipants);
    //    NavigationManager.NavigateTo("AllChampionship/GenerateChampionShip/", true);
    //}
    void cancel()
    {

        NavigationManager.NavigateTo("AllChampionship/GenerateChampionShip/", true);
    }

    void Change(object value)
    {
        if ((int)value != 0)
        {
            str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;
            var GetParti = ChampionshipService.GetPartiOfRac((int)value, Convert.ToInt32(ChampionShId));
            // selectedParticipants = ParticipantSevice.GetParticipantbyId((int)value);
            newParticipants = new List<PartiWLastResult>(GetParti);
            customers = Racings.AsEnumerable();
            ParticipantsGrid.Reload();
        }

    }
    void OnChanges(object values, string name)
    {
        data = values is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)values) : values;
    }
    public class z
    {
        public object participateIdz { get; set; }
        public object Racingz { get; set; }
    }
    void Delete(PartiWLastResult part)
    {

        newParticipants.Remove(part);
        ParticipantsGrid.Reload();
    }
    //protected void addResult(Participants Particip)
    //{
    //    int result =(time.Value.Minute*60) + time.Value.Second;
    //    var CSDID = ChampionshipService.GetChampionRacingDetailsUpdate(Convert.ToInt32(ChampionShId), Particip.Id, (int)str);
    //    newChampionShipwithRacing.Id = CSDID;
    //    newChampionShipwithRacing.Result = result;
    //    ChampionshipService.AddNewResults(newChampionShipwithRacing);
    //}
    void OnChange(DateTime? value, string name, string format)
    {
        time = value;
        var Partyies = Party;
        int result = (time.Value.Minute * 60) + time.Value.Second;
        var CSDID = ChampionshipService.GetChampionRacingDetailsUpdate(Convert.ToInt32(ChampionShId), Partyies.Id, (int)str);
        newChampionShipwithRacing.Id = CSDID;
        newChampionShipwithRacing.Result = result;
        ChampionshipService.AddNewResults(newChampionShipwithRacing);
    }
    void DateRender(DateRenderEventArgs args)
    {
        args.Disabled = dates.Contains(args.Date);
    }
    void TheEnd()
    {
        ChampionshipService.Addfinal(Convert.ToInt32(ChampionShId));
        ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "تمت انهاء البطولة", Duration = 4000 });
        //newParticipants.Remove(part);
        //ParticipantsGrid.Reload();
    }
    void ShowNotification(NotificationMessage message)
    {
        notificationService.Notify(message);

    }
}
