@attribute [Authorize]
@page "/AllChampionship/Edit/{ChampionId}"
@using Swimming.Data
@using Swimming.CustomModel
@inject IJSRuntime JSRuntime
@inject Swimming.IService.IChampionshipService ChampionshipService
@inject Swimming.IService.IParticipantSevice ParticipantSevice
@inject Swimming.IService.IRacingService RacingService
@inject NavigationManager NavigationManager
@inject NotificationService notificationService
<h1>تعديل البطولة </h1>
<hr />
<RadzenCard>
    <AuthorizeView Context="authContext">
        <Authorized>
            <EditForm Model="@NewChampionship" Context="formContext">
                <DataAnnotationsValidator />
                <div class="col-md-4">
                    <div class="form-group">
                        <label for="Name" class="control-label">الاسم</label>
                        <InputText for="Name" class="form-control" @bind-Value="@NewChampionship.ChampionshipName"></InputText>

                    </div>
                    <div class="form-group">
                        <label asp-for="Date" class="control-label">تاريخ السباق</label>
                        <RadzenDatePicker @bind-Value="@NewChampionship.Date" DateFormat="d" class="control-label" />
                    </div>

                    <div class="form-group">
                        <label asp-for="CaptainOrOrganizName" class="control-label">المشترك</label>
                        <RadzenDropDown AllowClear="true" TValue="int"
                                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        FilterOperator="StringFilterOperator.StartsWith"
                                        AllowFiltering="true"
                                        Data="@allParticipants"
                                        TextProperty="Name"
                                        ValueProperty="Id"
                                        Style="margin-bottom: 20px"
                                        Change="@(args => Change(args))"
                                        class="form-control" />
                    </div>
                    <RadzenGrid @ref="ParticipantsGrid" AllowFiltering="true"
                                AllowPaging="true" PageSize="3"
                                AllowSorting="true" EditMode="DataGridEditMode.Single"
                                Data="@newParticipants" TItem="Participants" Style="width:700px !important">
                        <Columns>
                            <RadzenGridColumn TItem="Participants" Property="Name" Title="Name" />
                            <RadzenGridColumn TItem="Participants" Property="Birthday" Title="تاريخ الميلاد">
                                <Template Context="Participants">
                                    @String.Format("{0:d}", Participants.Birthday)
                                </Template>
                            </RadzenGridColumn>

                            <RadzenGridColumn Width="100px" TItem="Participants" Property="al:web:url" Title="+" Filterable="false">
                                <Template Context="Participants">
                                    <RadzenButton Text="" Icon="+" Click="@(args => adddetails(Participants) )" id="bnt-style-general">

                                    </RadzenButton>
                                </Template>
                            </RadzenGridColumn>

                            <RadzenGridColumn Width="150px" TItem="Participants" Property="al:web:url" Title="مسح" Filterable="false">
                                <Template Context="Participants">
                                    <RadzenButton Text="مسح" Icon="delete" Click="@(args => Delete(Participants))" id="bnt-style-general" />
                                </Template>
                            </RadzenGridColumn>


                        </Columns>


                    </RadzenGrid>

                    <div class="form-group">
                        <button type="submit" class="btn btn-default" @onclick="() => UpdateChampionship()">حفظ</button>
                        <button class="btn" type="button" @onclick="() => cancel()">إلغاء</button>
                    </div>


                </div>
                @if (show)
                {
                    <AddDetailsOfChamp championDetailsID="@SavedChampionId" ParticiID="@PartiId" />
                }
            </EditForm>
        </Authorized>
    </AuthorizeView>
</RadzenCard>


@code {
    RadzenGrid<Participants> ParticipantsGrid;
    [Parameter]
    public string ChampionId { get; set; }
    List<Participants> newParticipants = new List<Participants>();
    List<Participants> allParticipants = new List<Participants>();
    Participants selectedParticipants = new Participants();
    List<Racing> Racings;
    IEnumerable<Racing> customers;
    Championship NewChampionship = new Championship();
    IEnumerable<int> selectedRacing;
    object str = null;
    object data = null;
    public string SavedChampionId { get; set; }
    string PartiId = null;
    bool show = false;
    protected override async Task OnInitializedAsync()
    {
        allParticipants = await Task.Run(() => ParticipantSevice.GetParticipants());
        newParticipants = await Task.Run(() => ChampionshipService.GetParticipants(Convert.ToInt32(ChampionId)));
        NewChampionship = await Task.Run(() => ChampionshipService.GetChampionshipbyId(Convert.ToInt32(ChampionId)));
        SavedChampionId = ChampionId;
    }
    protected void UpdateChampionship()
    {
        ChampionshipService.UpdateChampionship(NewChampionship, newParticipants);
        ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "تمت التعديل بنجاح", Duration = 4000 });
        // NavigationManager.NavigateTo("AllChampionship/GenerateChampionShip/", true);
    }
    void cancel()
    {

        NavigationManager.NavigateTo("AllChampionship/GenerateChampionShip/", true);
    }

    void Change(object value)
    {
        if ((int)value !=0)
        {
            str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;
            Racings = RacingService.GetRacingOfParti((int)value);
            selectedParticipants = ParticipantSevice.GetParticipantbyId((int)value);
            var IfSelected = newParticipants.Where(z => z.Id == (int)value).Count();
            if (IfSelected == 0)
            {
                newParticipants.Add(selectedParticipants);
                ChampionshipService.AddNewParti(Convert.ToInt32(ChampionId), (int)value);
                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "تمت الاضافة بنجاح", Duration = 4000 });
            }
            else
            {
                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "تمت اضافة هذا المشارك من قبل", Duration = 4000 });
            }
            customers = Racings.AsEnumerable();
            ParticipantsGrid.Reload();
        }
    }
    public class z
    {
        public object participateIdz { get; set; }
        public object Racingz { get; set; }
    }
    void Delete(Participants part)
    {
        ChampionshipService.DeleteChampionshipwithRa(Convert.ToInt32(ChampionId), part);
        newParticipants.Remove(part);
        ParticipantsGrid.Reload();
        show = false;
        ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "تم المسح بنجاح", Duration = 4000 });
    }
    protected void adddetails(Participants Particip)
    {
        PartiId = Particip.Id.ToString();
        show = true;
        // NavigationManager.NavigateTo("AllChampionship/AddDetailsOfChamp/" + Particip.Id +"/"+ ChampionId, true);
    }
    void ShowNotification(NotificationMessage message)
    {
        notificationService.Notify(message);

    }
}
