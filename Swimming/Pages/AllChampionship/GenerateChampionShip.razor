@attribute [Authorize]
@page "/AllChampionship/GenerateChampionShip"
@using Swimming.Data
@inject Swimming.IService.IChampionshipService  ChampionshipService
@inject Swimming.IService.IReportService  ReportService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@using System.Text.Json
@using System.Text.Json.Serialization
@inject NotificationService notificationService
<div class="titleicon">
    <span class="oi oi-star" aria-hidden="true"></span>
    <h1>البطولات </h1>
</div>
<AuthorizeView Context="AuthorizeContext">
    <Authorized>

        <br />
        <RadzenButton Icon="add_circle_outline" style="margin-bottom:10px; margin-left:1350px;" Text="اضافة" Click="@InsrtRow" />
        <RadzenCard>
            @if (ChampionshipList == null)
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                <RadzenGrid @ref="ChampionshipGrid" AllowFiltering="true"
                            AllowPaging="true" PageSize="10"
                            AllowSorting="true" EditMode="DataGridEditMode.Multiple"
                            Data="@ChampionshipList" TItem="Championship" CellRender="@CellRender">
                    <Columns>

                        <RadzenGridColumn TItem="Championship" Property="ChampionshipName" Title="اسم البطولة" />
                        <RadzenGridColumn TItem="Championship" Property="Date" Title="تاريخ البطولة">
                            <Template Context="Championship">
                                @String.Format("{0:d}", Championship.Date)
                            </Template>
                        </RadzenGridColumn>

                        @*<RadzenGridColumn TItem="Championship" Property="al:web:url" Title="اضافة سباق" Filterable="false">
                                <Template Context="Championship">
                                    <RadzenButton Width="150px" Text="اضافة سباق" Icon="edit" Click="@(args => AddRacingtoParti(Championship))" id="bnt-style-general" />
                                </Template>
                            </RadzenGridColumn>*@

                        <RadzenGridColumn Width="170px" TItem="Championship" Property="AddResult" Title="اضافة نتائج" Filterable="false">
                            <Template Context="Championship">
                                <RadzenButton Width="150px" Text="اضافة نتائج" Icon="edit" Click="@(args => AddResulttoParti(Championship))" id="bnt-style-general" />
                            </Template>
                        </RadzenGridColumn>
                        <RadzenGridColumn Width="120px" TItem="Championship" Property="EditChamp" Title="تعديل" Filterable="false">
                            <Template Context="Championship">
                                <RadzenButton Width="100px" Text="تعديل" Icon="edit" Click="@(args => Edit(Championship))" id="bnt-style-general" />
                            </Template>
                        </RadzenGridColumn>
                        <RadzenGridColumn Width="190px"  TItem="Championship" Property="FilterChamp" Title="انشاء تصفيه" Filterable="false">
                            <Template Context="Championship">
                                <RadzenButton Text="انشاء تصفيه" Icon="filter" Click="@(args => Filtering(Championship))" id="bnt-style-general" />
                            </Template>
                        </RadzenGridColumn>
                        <RadzenGridColumn Width="120px" TItem="Championship" Property="DeleteChamp" Title="مسح" Filterable="false">
                            <Template Context="Championship">
                                <RadzenButton Text="مسح" Icon="delete" Click="@(args => Delete(Championship))" id="bnt-style-general" />
                            </Template>
                        </RadzenGridColumn>
                    </Columns>
                </RadzenGrid>

            }
        </RadzenCard>

    </Authorized>
</AuthorizeView>


@code {
    RadzenGrid<Championship> ChampionshipGrid;
    [Parameter]
    public string viewType { get; set; }
    List<Championship> ChampionshipList = new List<Championship>();
    Championship Championships = new Championship();
    IEnumerable<int> yearsofChampionship;
    protected override async Task OnInitializedAsync()
    {

        ChampionshipList = await Task.Run(() => ChampionshipService.GetChampionship());
    }
    void EditRow(Championship EditChampionship)
    {
        ChampionshipGrid.EditRow(EditChampionship);
    }
    void Filtering(Championship EditChampionship)
    {
        var Response=  ChampionshipService.Generatefiltering(EditChampionship.Id);
        if (Response==1)
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "تم بنجاح", Duration = 4000 });
        }
        else
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "تم إنشاء تصفية من قبل", Duration = 4000 });
        }

    }
    protected void Edit(Championship UpdateChampionship)
    {

        NavigationManager.NavigateTo("AllChampionship/Edit/" + UpdateChampionship.Id);
    }
    async Task Delete(Championship DeleteChampionship)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "هل تريد مسح البطولة ؟");
        if (confirmed)
        {
            DeleteChampionship.DeletedDate = DateTime.Now;
            ChampionshipService.DeleteChampionship(DeleteChampionship);
            ChampionshipList.Remove(DeleteChampionship);
            ChampionshipGrid.Reload();
        }
    }
    protected void InsrtRow()
    {

        NavigationManager.NavigateTo("AllChampionship/Add/");
    }
    protected void AddRacingtoParti(Championship UpdateChampionship)
    {

        NavigationManager.NavigateTo("AllChampionship/AddRacingtoParticiOfChampionship/" + UpdateChampionship.Id);
    }
    protected void AddResulttoParti(Championship ResultChampionship)
    {

        NavigationManager.NavigateTo("AllChampionship/AddResult/" + ResultChampionship.Id);
    }
    void CellRender(CellRenderEventArgs<Championship> args)
    {

    }
    void ShowNotification(NotificationMessage message)
    {
        notificationService.Notify(message);

    }
}
